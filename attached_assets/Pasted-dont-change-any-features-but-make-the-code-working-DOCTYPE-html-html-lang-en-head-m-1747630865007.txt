dont change any features but make the code working 

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Ultimate Study Focus Suite</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js" integrity="sha256-ZewudUtw1E2lOlp2nt2gT2h7oHouO5rzs0HbiQdRNG4=" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js" integrity="sha256-7zkK04p+ZOz/OkDqA2oL8lVY3EBwfXiUYmPZ7bM4o1c=" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.22.9/babel.min.js" integrity="sha256-ZkxIsD6JklzowqCPw3M5+5k3VUtV2Druq4gT8N6vTps=" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/framer-motion@10.12.16/dist/framer-motion.js" integrity="sha256-jwH3E+pD5eKXgI1sN/A8L0rR62Uyyx5bO1G9W2O8W94=" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/@fullcalendar/core@6.1.8/main.min.js" integrity="sha256-y8vmi3U03+5q+wnxC+WL5Bv03L0aO+6D63rUFzTPnUk=" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/@fullcalendar/daygrid@6.1.8/main.min.js" integrity="sha256-QLDBO+F1qB0H/j+0W+Tw3eueSOkj7C+xkTK0GqV4mYg=" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/@fullcalendar/interaction@6.1.8/main.min.js" integrity="sha256-WfAgyNlb0GzvK4YpO1sB4m+2hU1vC+OwVKOq0L1rC9I=" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js" integrity="sha256-AywuHg9F4qOIIsANB7k7i/fS0p3L0cDPEXRYwDCT5Js=" crossorigin="anonymous"></script>
  <link href="https://cdn.jsdelivr.net/npm/@fullcalendar/core@6.1.8/main.min.css" rel="stylesheet" integrity="sha256-u0b91umkS4/oKLCG+Kwq0tN1p91dV31gTfUo1w2lERM=" crossorigin="anonymous" />
  <link href="./styles.css" rel="stylesheet" />
</head>
<body>
  <div id="root"></div>
  <script type="text/babel" defer>
    const { useState, useEffect, useRef, useMemo, Component } = React;
    const { motion } = window.framerMotion;

    class ErrorBoundary extends Component {
      state = { error: null };
      static getDerivedStateFromError(error) {
        return { error: error.message };
      }
      render() {
        if (this.state.error) {
          return (
            <div className="p-4 text-red-500" role="alert">
              <h2>Error: {this.state.error}</h2>
              <p>Please check the console for details or refresh the page.</p>
            </div>
          );
        }
        return this.props.children;
      }
    }

    const formatTime = (seconds) => {
      const h = Math.floor(seconds / 3600).toString().padStart(2, '0');
      const m = Math.floor((seconds % 3600) / 60).toString().padStart(2, '0');
      const s = (seconds % 60).toString().padStart(2, '0');
      return `${h}:${m}:${s}`;
    };

    const motivationalQuotes = [
      "The secret of getting ahead is getting started. – Mark Twain",
      "You don’t have to be great to start, but you have to start to be great. – Zig Ziglar",
      "Success is the sum of small efforts, repeated day in and day out. – Robert Collier",
    ];

    const safeLocalStorage = {
      getItem: (key, defaultValue) => {
        try {
          const value = localStorage.getItem(key);
          return value ? JSON.parse(value) : defaultValue;
        } catch (e) {
          console.warn(`Error reading localStorage key "${key}":`, e);
          return defaultValue;
        }
      },
      setItem: (key, value) => {
        try {
          localStorage.setItem(key, JSON.stringify(value));
        } catch (e) {
          console.warn(`Error writing to localStorage key "${key}":`, e);
        }
      },
    };

    const Pomodoro = ({ tasks, setTasks, addSession }) => {
      const [settings, setSettings] = useState(() =>
        safeLocalStorage.getItem('pomoSettings', { work: 25 * 60, shortBreak: 5 * 60, longBreak: 15 * 60 })
      );
      const [timeLeft, setTimeLeft] = useState(settings.work);
      const [isRunning, setIsRunning] = useState(false);
      const [session, setSession] = useState('Work');
      const [completedSessions, setCompletedSessions] = useState(
        parseInt(safeLocalStorage.getItem('completedSessions', 0)) || 0
      );
      const [longBreakCounter, setLongBreakCounter] = useState(0);
      const [darkMode, setDarkMode] = useState(safeLocalStorage.getItem('darkMode', false));
      const [soundEnabled, setSoundEnabled] = useState(safeLocalStorage.getItem('soundEnabled', true));
      const [selectedSound, setSelectedSound] = useState('alarm');
      const [ambientSound, setAmbientSound] = useState(null);
      const [ambientVolume, setAmbientVolume] = useState(0.5);
      const [currentTask, setCurrentTask] = useState(null);
      const [showSettings, setShowSettings] = useState(false);
      const [customSound, setCustomSound] = useState(null);
      const [quote, setQuote] = useState('');
      const audioRef = useRef(null);
      const ambientRef = useRef(null);

      useEffect(() => {
        if (Notification.permission !== 'granted') {
          Notification.requestPermission();
        }
      }, []);

      useEffect(() => {
        safeLocalStorage.setItem('pomoSettings', settings);
        setTimeLeft(settings.work);
      }, [settings]);

      useEffect(() => {
        safeLocalStorage.setItem('completedSessions', completedSessions);
        if (completedSessions > 0) {
          addSession({ type: 'Work', duration: settings.work });
        }
      }, [completedSessions]);

      useEffect(() => {
        safeLocalStorage.setItem('darkMode', darkMode);
      }, [darkMode]);

      useEffect(() => {
        safeLocalStorage.setItem('soundEnabled', soundEnabled);
      }, [soundEnabled]);

      useEffect(() => {
        if (ambientRef.current) {
          ambientRef.current.volume = ambientVolume;
        }
      }, [ambientVolume]);

      useEffect(() => {
        if (!isRunning) {
          if (ambientRef.current) ambientRef.current.pause();
          return;
        }
        const interval = setInterval(() => {
          setTimeLeft((t) => {
            if (t === 0) {
              const isWork = session === 'Work';
              const newLongBreakCounter = isWork ? longBreakCounter + 1 : longBreakCounter;
              const newTime =
                isWork && newLongBreakCounter % 4 === 0
                  ? settings.longBreak
                  : isWork
                  ? settings.shortBreak
                  : settings.work;

              setSession(isWork ? (newLongBreakCounter % 4 === 0 ? 'Long Break' : 'Break') : 'Work');
              setLongBreakCounter(newLongBreakCounter);

              if (isWork) {
                setCompletedSessions((s) => s + 1);
                if (currentTask) {
                  setTasks((prev) =>
                    prev.map((t) =>
                      t.id === currentTask.id ? { ...t, sessions: (t.sessions || 0) + 1 } : t
                    )
                  );
                }
              } else {
                setQuote(motivationalQuotes[Math.floor(Math.random() * motivationalQuotes.length)]);
              }
              if (audioRef.current && soundEnabled) audioRef.current.play();
              if (Notification.permission === 'granted' && soundEnabled) {
                new Notification(`${session} session ended!`);
              }
              return newTime;
            }
            return t - 1;
          });
        }, 1000);
        if (ambientSound && ambientRef.current) {
          ambientRef.current.loop = true;
          ambientRef.current.play();
        }
        return () => {
          clearInterval(interval);
          if (ambientRef.current) ambientRef.current.pause();
        };
      }, [isRunning, session, longBreakCounter, soundEnabled, currentTask, settings, ambientSound]);

      useEffect(() => {
        return () => {
          if (customSound) {
            URL.revokeObjectURL(customSound);
          }
        };
      }, [customSound]);

      const reset = () => {
        setTimeLeft(settings.work);
        setSession('Work');
        setCompletedSessions(0);
        setIsRunning(false);
        setLongBreakCounter(0);
        setCurrentTask(null);
        safeLocalStorage.setItem('completedSessions', 0);
      };

      const handleSettingsChange = (e) => {
        const { name, value } = e.target;
        if (value > 0) {
          setSettings((prev) => ({ ...prev, [name]: parseInt(value) * 60 }));
        }
      };

      const handleCustomSound = (e) => {
        const file = e.target.files[0];
        if (file && file.type.startsWith('audio/')) {
          if (customSound) {
            URL.revokeObjectURL(customSound);
          }
          const url = URL.createObjectURL(file);
          setCustomSound(url);
          setSelectedSound('custom');
        }
      };

      const soundOptions = {
        alarm: 'https://actions.google.com/sounds/v1/alarms/alarm_clock.ogg',
        chime: 'https://actions.google.com/sounds/v1/alarms/digital_watch_alarm_long.ogg',
        bell: 'https://actions.google.com/sounds/v1/alarms/bell_ringing_04.ogg',
        ...(customSound && { custom: customSound }),
      };

      const ambientOptions = {
        rain: 'https://actions.google.com/sounds/v1/weather/rain_light_loop.ogg',
        coffee: 'https://actions.google.com/sounds/v1/ambiences/coffee_shop.ogg',
        whiteNoise: 'https://actions.google.com/sounds/v1/ambiences/white_noise.ogg',
      };

      return (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="p-4 sm:p-6"
        >
          <div className={`p-6 rounded-lg ${darkMode ? 'bg-gray-800 text-white' : 'bg-white text-black'} shadow-lg`}>
            <h2 className="text-2xl font-bold mb-4">Pomodoro Timer</h2>
            <div className="text-lg mb-2">Session: {session}</div>
            {currentTask && (
              <div className="text-md mb-2">
                Task: {currentTask.title}
                {currentTask.playlistUrl && (
                  <button
                    className="ml-4 px-2 py-1 bg-red-500 text-white rounded hover:bg-red-600"
                    onClick={() => window.open(currentTask.playlistUrl, '_blank')}
                    aria-label="Play YouTube Playlist"
                  >
                    ▶ Playlist
                  </button>
                )}
              </div>
            )}
            <div className="text-4xl sm:text-6xl font-mono mb-4">{formatTime(timeLeft)}</div>
            {quote && session !== 'Work' && (
              <div className="text-md italic mb-4">{quote}</div>
            )}
            <div className="w-full bg-gray-200 rounded-full h-2.5 mb-4">
              <div
                className="bg-blue-600 h-2.5 rounded-full"
                style={{
                  width: `${
                    (1 -
                      timeLeft /
                        (session === 'Work'
                          ? settings.work
                          : session === 'Long Break'
                          ? settings.longBreak
                          : settings.shortBreak)) *
                    100
                  }%`,
                }}
              ></div>
            </div>
            <div className="flex flex-wrap gap-2 mb-4">
              <button
                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                onClick={() => setIsRunning((p) => !p)}
                aria-label={isRunning ? 'Pause Timer' : 'Start Timer'}
              >
                {isRunning ? 'Pause' : 'Start'}
              </button>
              <button
                className="px-4 py-2 border border-gray-300 rounded hover:bg-gray-100"
                onClick={reset}
                aria-label="Reset Timer"
              >
                Reset
              </button>
              <button
                className="px-4 py-2 border border-gray-300 rounded hover:bg-gray-100"
                onClick={() => setShowSettings(true)}
                aria-label="Open Settings"
              >
                Settings
              </button>
              <button
                className="px-4 py-2 border border-gray-300 rounded hover:bg-gray-100"
                onClick={() => setDarkMode((d) => !d)}
                aria-label={darkMode ? 'Switch to Light Mode' : 'Switch to Dark Mode'}
              >
                {darkMode ? '☀️ Light' : '🌙 Dark'}
              </button>
              <button
                className="px-4 py-2 border border-gray-300 rounded hover:bg-gray-100"
                onClick={() => setSoundEnabled((s) => !s)}
                aria-label={soundEnabled ? 'Disable Sound' : 'Enable Sound'}
              >
                {soundEnabled ? '🔊 On' : '🔇 Off'}
              </button>
              <select
                className="px-4 py-2 border border-gray-300 rounded"
                value={selectedSound}
                onChange={(e) => setSelectedSound(e.target.value)}
                aria-label="Select Alarm Sound"
              >
                {Object.keys(soundOptions).map((key) => (
                  <option key={key} value={key}>
                    {key.charAt(0).toUpperCase() + key.slice(1)}
                  </option>
                ))}
              </select>
              <input
                type="file"
                accept="audio/*"
                onChange={handleCustomSound}
                className="px-4 py-2 border border-gray-300 rounded"
                aria-label="Upload Custom Sound"
              />
              <select
                className="px-4 py-2 border border-gray-300 rounded"
                value={ambientSound || ''}
                onChange={(e) => setAmbientSound(e.target.value || null)}
                aria-label="Select Ambient Sound"
              >
                <option value="">No Ambient</option>
                {Object.keys(ambientOptions).map((key) => (
                  <option key={key} value={key}>
                    {key.charAt(0).toUpperCase() + key.slice(1)}
                  </option>
                ))}
              </select>
              {ambientSound && (
                <div className="flex items-center gap-2">
                  <label htmlFor="volume">Volume:</label>
                  <input
                    id="volume"
                    type="range"
                    min="0"
                    max="1"
                    step="0.1"
                    value={ambientVolume}
                    onChange={(e) => setAmbientVolume(parseFloat(e.target.value))}
                    className="w-24"
                    aria-label="Adjust Ambient Volume"
                  />
                </div>
              )}
            </div>
            <div className="text-lg mb-4">Completed Sessions: {completedSessions}</div>
            <div className="mb-4">
              <h3 className="text-lg font-semibold">Select Task</h3>
              <select
                className="w-full p-2 border rounded"
                value={currentTask?.id || ''}
                onChange={(e) => {
                  const task = tasks.find((t) => t.id === e.target.value);
                  setCurrentTask(task || null);
                }}
                aria-label="Select Task"
              >
                <option value="">No Task</option>
                {tasks.map((task) => (
                  <option key={task.id} value={task.id}>
                    {task.title} ({task.category || 'Uncategorized'})
                  </option>
                ))}
              </select>
            </div>
            <audio ref={audioRef} src={soundOptions[selectedSound]} />
            {ambientSound && <audio ref={ambientRef} src={ambientOptions[ambientSound]} />}
          </div>
          {showSettings && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center" role="dialog" aria-modal="true">
              <div className={`p-6 rounded-lg ${darkMode ? 'bg-gray-800 text-white' : 'bg-white text-black'}`}>
                <h3 className="text-xl font-bold mb-4">Pomodoro Settings</h3>
                <div className="space-y-4">
                  <div>
                    <label htmlFor="work">Work Duration (min):</label>
                    <input
                      id="work"
                      type="number"
                      name="work"
                      value={settings.work / 60}
                      onChange={handleSettingsChange}
                      className="ml-2 p-1 border rounded text-black"
                      min="1"
                      aria-label="Work Duration"
                    />
                  </div>
                  <div>
                    <label htmlFor="shortBreak">Short Break (min):</label>
                    <input
                      id="shortBreak"
                      type="number"
                      name="shortBreak"
                      value={settings.shortBreak / 60}
                      onChange={handleSettingsChange}
                      className="ml-2 p-1 border rounded text-black"
                      min="1"
                      aria-label="Short Break Duration"
                    />
                  </div>
                  <div>
                    <label htmlFor="longBreak">Long Break (min):</label>
                    <input
                      id="longBreak"
                      type="number"
                      name="longBreak"
                      value={settings.longBreak / 60}
                      onChange={handleSettingsChange}
                      className="ml-2 p-1 border rounded text-black"
                      min="1"
                      aria-label="Long Break Duration"
                    />
                  </div>
                </div>
                <button
                  className="mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                  onClick={() => setShowSettings(false)}
                  aria-label="Save Settings"
                >
                  Save
                </button>
              </div>
            </div>
          )}
        </motion.div>
      );
    };

    const Stopwatch = () => {
      const [time, setTime] = useState(0);
      const [isRunning, setIsRunning] = useState(false);
      const intervalRef = useRef(null);

      useEffect(() => {
        if (isRunning) {
          intervalRef.current = setInterval(() => {
            setTime((prev) => prev + 1);
          }, 1000);
        } else if (!isRunning && intervalRef.current) {
          clearInterval(intervalRef.current);
        }
        return () => clearInterval(intervalRef.current);
      }, [isRunning]);

      const reset = () => {
        setTime(0);
        setIsRunning(false);
      };

      return (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="p-4 sm:p-6"
        >
          <div className="p-6 rounded-lg bg-white shadow-lg">
            <h2 className="text-2xl font-bold mb-4">Stopwatch</h2>
            <div className="text-4xl sm:text-6xl font-mono mb-4">{formatTime(time)}</div>
            <div className="flex gap-2">
              <button
                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                onClick={() => setIsRunning((prev) => !prev)}
                aria-label={isRunning ? 'Pause Stopwatch' : 'Start Stopwatch'}
              >
                {isRunning ? 'Pause' : 'Start'}
              </button>
              <button
                className="px-4 py-2 border border-gray-300 rounded hover:bg-gray-100"
                onClick={reset}
                aria-label="Reset Stopwatch"
              >
                Reset
              </button>
            </div>
          </div>
        </motion.div>
      );
    };

    const Timer = () => {
      const [input, setInput] = useState('');
      const [timeLeft, setTimeLeft] = useState(0);
      const [isRunning, setIsRunning] = useState(false);
      const [error, setError] = useState('');
      const intervalRef = useRef(null);

      const validateInput = (value) => {
        const regex = /^(\d{1,2}):([0-5]\d):([0-5]\d)$/;
        if (!regex.test(value)) {
          setError('Please enter time in HH:MM:SS format (e.g., 01:30:00)');
          return false;
        }
        const [h, m, s] = value.split(':').map(Number);
        if (h > 99) {
          setError('Hours must be less than 100');
          return false;
        }
        setError('');
        return true;
      };

      const startTimer = () => {
        if (!validateInput(input)) return;
        const [h, m, s] = input.split(':').map(Number);
        const totalSeconds = h * 3600 + m * 60 + s;
        if (totalSeconds > 0) {
          setTimeLeft(totalSeconds);
          setIsRunning(true);
        } else {
          setError('Time must be greater than 0');
        }
      };

      useEffect(() => {
        if (isRunning && timeLeft > 0) {
          intervalRef.current = setInterval(() => {
            setTimeLeft((t) => {
              if (t === 0 && Notification.permission === 'granted') {
                new Notification('Timer ended!');
              }
              return t - 1;
            });
          }, 1000);
        } else if (timeLeft === 0) {
          clearInterval(intervalRef.current);
          setIsRunning(false);
        }
        return () => clearInterval(intervalRef.current);
      }, [isRunning, timeLeft]);

      const reset = () => {
        setTimeLeft(0);
        setInput('');
        setIsRunning(false);
        setError('');
      };

      return (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="p-4 sm:p-6"
        >
          <div className="p-6 rounded-lg bg-white shadow-lg">
            <h2 className="text-2xl font-bold mb-4">Timer</h2>
            <input
              type="text"
              placeholder="HH:MM:SS"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              className="w-full p-2 border rounded mb-4"
              aria-label="Enter Timer Duration"
            />
            {error && <p className="text-red-500 mb-2" role="alert">{error}</p>}
            <div className="text-4xl sm:text-6xl font-mono mb-4">{formatTime(timeLeft)}</div>
            <div className="flex gap-2">
              <button
                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                onClick={startTimer}
                disabled={isRunning}
                aria-label="Start Timer"
              >
                Start
              </button>
              <button
                className="px-4 py-2 border border-gray-300 rounded hover:bg-gray-100"
                onClick={reset}
                aria-label="Reset Timer"
              >
                Reset
              </button>
            </div>
          </div>
        </motion.div>
      );
    };

    const Calendar = ({ tasks, setTasks }) => {
      const calendarRef = useRef(null);

      useEffect(() => {
        if (calendarRef.current) {
          const calendar = new FullCalendar.Calendar(calendarRef.current, {
            plugins: [FullCalendar.dayGridPlugin, FullCalendar.interactionPlugin],
            initialView: 'dayGridMonth',
            events: tasks.map((task) => ({
              title: task.title + (task.playlistUrl ? ' ▶' : ''),
              date: task.date,
              className: task.completed ? 'bg-green-500' : 'bg-blue-500',
            })),
            dateClick: (arg) => {
              const title = prompt('Enter task title:');
              const category = prompt('Enter category (e.g., Math, Science):');
              const playlistUrl = prompt('Enter YouTube playlist URL (optional):');
              if (title) {
                let validPlaylist = null;
                if (playlistUrl && playlistUrl.includes('youtube.com/playlist?list=')) {
                  validPlaylist = playlistUrl;
                } else if (playlistUrl) {
                  alert('Invalid YouTube playlist URL. Skipping playlist.');
                }
                const newTask = {
                  id: Date.now().toString(),
                  title,
                  date: arg.dateStr,
                  completed: false,
                  sessions: 0,
                  priority: 'Medium',
                  category: category || 'Uncategorized',
                  playlistUrl: validPlaylist,
                };
                setTasks((prev) => [...prev, newTask]);
              }
            },
            eventDrop: (info) => {
              setTasks((prev) =>
                prev.map((t) =>
                  t.title === info.event.title.replace(' ▶', '') && t.date === info.oldEvent.startStr
                    ? { ...t, date: info.event.startStr }
                    : t
                )
              );
            },
            height: 'auto',
            editable: true,
            droppable: true,
          });
          calendar.render();
          return () => {
            calendar.destroy();
          };
        }
      }, [tasks, setTasks]);

      return (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="p-4 sm:p-6"
        >
          <div className="p-6 rounded-lg bg-white shadow-lg">
            <h2 className="text-2xl font-bold mb-4">📅 Task Calendar</h2>
            <div ref={calendarRef}></div>
          </div>
        </motion.div>
      );
    };

    const Tasks = ({ tasks, setTasks }) => {
      const [newTask, setNewTask] = useState('');
      const [newCategory, setNewCategory] = useState('');
      const [newPriority, setNewPriority] = useState('Medium');
      const [newPlaylistUrl, setNewPlaylistUrl] = useState('');
      const [sortBy, setSortBy] = useState('date');

      const addTask = () => {
        if (newTask.trim()) {
          let validPlaylist = null;
          if (newPlaylistUrl && newPlaylistUrl.includes('youtube.com/playlist?list=')) {
            validPlaylist = newPlaylistUrl;
          } else if (newPlaylistUrl) {
            alert('Invalid YouTube playlist URL. Skipping playlist.');
          }
          setTasks((prev) => [
            ...prev,
            {
              id: Date.now().toString(),
              title: newTask,
              date: new Date().toISOString().split('T')[0],
              completed: false,
              sessions: 0,
              priority: newPriority,
              category: newCategory || 'Uncategorized',
              playlistUrl: validPlaylist,
            },
          ]);
          setNewTask('');
          setNewCategory('');
          setNewPriority('Medium');
          setNewPlaylistUrl('');
        }
      };

      const toggleTask = (id) => {
        setTasks((prev) =>
          prev.map((t) => (t.id === id ? { ...t, completed: !t.completed } : t))
        );
      };

      const deleteTask = (id) => {
        setTasks((prev) => prev.filter((t) => t.id !== id));
      };

      const updatePriority = (id, priority) => {
        setTasks((prev) => prev.map((t) => (t.id === id ? { ...t, priority } : t)));
      };

      const updatePlaylist = (id, playlistUrl) => {
        const validPlaylist = playlistUrl.includes('youtube.com/playlist?list=') ? playlistUrl : null;
        if (playlistUrl && !validPlaylist) {
          alert('Invalid YouTube playlist URL.');
        }
        setTasks((prev) => prev.map((t) => (t.id === id ? { ...t, playlistUrl: validPlaylist } : t)));
      };

      const sortedTasks = useMemo(() => {
        const tasksCopy = [...tasks];
        if (sortBy === 'priority') {
          const priorityOrder = { High: 1, Medium: 2, Low: 3 };
          tasksCopy.sort((a, b) => priorityOrder[a.priority] - priorityOrder[b.priority]);
        } else if (sortBy === 'date') {
          tasksCopy.sort((a, b) => new Date(a.date) - new Date(b.date));
        } else if (sortBy === 'category') {
          tasksCopy.sort((a, b) => (a.category || '').localeCompare(b.category || ''));
        }
        return tasksCopy;
      }, [tasks, sortBy]);

      const completionPercentage = useMemo(
        () => (tasks.length ? (tasks.filter((t) => t.completed).length / tasks.length) * 100 : 0),
        [tasks]
      );

      return (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="p-4 sm:p-6"
        >
          <div className="p-6 rounded-lg bg-white shadow-lg">
            <h2 className="text-2xl font-bold mb-4">📋 Tasks</h2>
            <div className="mb-4">
              <div className="w-full bg-gray-200 rounded-full h-2.5">
                <div
                  className="bg-green-500 h-2.5 rounded-full"
                  style={{ width: `${completionPercentage}%` }}
                ></div>
              </div>
              <p className="text-sm mt-1">Task Completion: {completionPercentage.toFixed(1)}%</p>
            </div>
            <div className="flex flex-col sm:flex-row gap-2 mb-4">
              <input
                type="text"
                value={newTask}
                onChange={(e) => setNewTask(e.target.value)}
                placeholder="Add a new task"
                className="flex-1 p-2 border rounded"
                aria-label="New Task Title"
              />
              <input
                type="text"
                value={newCategory}
                onChange={(e) => setNewCategory(e.target.value)}
                placeholder="Category"
                className="flex-1 p-2 border rounded"
                aria-label="Task Category"
              />
              <select
                value={newPriority}
                onChange={(e) => setNewPriority(e.target.value)}
                className="p-2 border rounded"
                aria-label="Task Priority"
              >
                <option value="Low">Low</option>
                <option value="Medium">Medium</option>
                <option value="High">High</option>
              </select>
              <input
                type="text"
                value={newPlaylistUrl}
                onChange={(e) => setNewPlaylistUrl(e.target.value)}
                placeholder="YouTube Playlist URL"
                className="flex-1 p-2 border rounded"
                aria-label="YouTube Playlist URL"
              />
              <button
                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                onClick={addTask}
                aria-label="Add Task"
              >
                Add
              </button>
            </div>
            <div className="mb-4">
              <label htmlFor="sortBy" className="mr-2">Sort By:</label>
              <select
                id="sortBy"
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="p-2 border rounded"
                aria-label="Sort Tasks"
              >
                <option value="date">Date</option>
                <option value="priority">Priority</option>
                <option value="category">Category</option>
              </select>
            </div>
            <ul className="space-y-2">
              {sortedTasks.map((task) => (
                <motion.li
                  key={task.id}
                  className={`flex flex-col sm:flex-row items-start sm:items-center justify-between p-2 border rounded ${
                    task.priority === 'High'
                      ? 'border-red-500'
                      : task.priority === 'Low'
                      ? 'border-green-500'
                      : 'border-yellow-500'
                  } ${task.completed ? 'animate-pulse' : ''}`}
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className="flex items-center flex-1 mb-2 sm:mb-0">
                    <input
                      type="checkbox"
                      checked={task.completed}
                      onChange={() => toggleTask(task.id)}
                      className="mr-2"
                      aria-label={`Toggle ${task.title} completion`}
                    />
                    <span className={task.completed ? 'line-through' : ''}>
                      {task.title} ({task.date}, {task.category || 'Uncategorized'})
                      {task.playlistUrl && (
                        <a
                          href={task.playlistUrl}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="ml-2 text-red-500 hover:underline"
                          aria-label="Open YouTube Playlist"
                        >
                          ▶ Playlist
                        </a>
                      )}
                    </span>
                  </div>
                  <div className="flex flex-col sm:flex-row items-start sm:items-center gap-2">
                    <select
                      value={task.priority}
                      onChange={(e) => updatePriority(task.id, e.target.value)}
                      className="p-1 border rounded"
                      aria-label={`Set priority for ${task.title}`}
                    >
                      <option value="Low">Low</option>
                      <option value="Medium">Medium</option>
                      <option value="High">High</option>
                    </select>
                    <input
                      type="text"
                      defaultValue={task.playlistUrl || ''}
                      onBlur={(e) => updatePlaylist(task.id, e.target.value)}
                      placeholder="Update Playlist URL"
                      className="p-1 border rounded w-full sm:w-48"
                      aria-label={`Update playlist for ${task.title}`}
                    />
                    <button
                      className="text-red-500 hover:text-red-700"
                      onClick={() => deleteTask(task.id)}
                      aria-label={`Delete ${task.title}`}
                    >
                      Delete
                    </button>
                  </div>
                </motion.li>
              ))}
            </ul>
          </div>
        </motion.div>
      );
    };

    const Analytics = ({ sessions }) => {
      const chartRef = useRef(null);
      const chartInstance = useRef(null);

      useEffect(() => {
        if (chartRef.current && sessions.length > 0) {
          if (chartInstance.current) chartInstance.current.destroy();
          const dates = [...new Set(sessions.map((s) => new Date(s.date).toDateString()))];
          const data = dates.map((date) => ({
            date,
            count: sessions.filter(
              (s) => new Date(s.date).toDateString() === date && s.type === 'Work'
            ).length,
          }));

          chartInstance.current = new Chart(chartRef.current, {
            type: 'line',
            data: {
              labels: data.map((d) => d.date),
              datasets: [
                {
                  label: 'Work Sessions',
                  data: data.map((d) => d.count),
                  borderColor: 'rgba(59, 130, 246, 1)',
                  fill: false,
                },
              ],
            },
            options: { responsive: true },
          });
        }
        return () => {
          if (chartInstance.current) chartInstance.current.destroy();
        };
      }, [sessions]);

      const totalTime = useMemo(
        () => sessions.filter((s) => s.type === 'Work').reduce((sum, s) => sum + s.duration, 0),
        [sessions]
      );

      const exportStats = () => {
        const csv = ['Date,Type,Duration', ...sessions.map((s) => `${s.date},${s.type},${s.duration}`)].join('\n');
        const blob = new Blob([csv], { type: 'text/csv' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'study_stats.csv';
        a.click();
        URL.revokeObjectURL(url);
      };

      return (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="p-4 sm:p-6"
        >
          <div className="p-6 rounded-lg bg-white shadow-lg">
            <h2 className="text-2xl font-bold mb-4">📊 Analytics</h2>
            <div className="mb-4">
              <p>Total Work Time: {formatTime(totalTime)}</p>
              <p>Completed Sessions: {sessions.filter((s) => s.type === 'Work').length}</p>
            </div>
            {sessions.length > 0 ? (
              <canvas ref={chartRef} aria-label="Work Sessions Chart"></canvas>
            ) : (
              <p>No sessions recorded yet.</p>
            )}
            <button
              className="mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
              onClick={exportStats}
              aria-label="Export Statistics"
            >
              Export Stats
            </button>
          </div>
        </motion.div>
      );
    };

    const Notes = () => {
      const [notes, setNotes] = useState(safeLocalStorage.getItem('notes', ''));

      useEffect(() => {
        safeLocalStorage.setItem('notes', notes);
      }, [notes]);

      const exportNotes = () => {
        const blob = new Blob([notes], { type: 'text/markdown' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'study_notes.md';
        a.click();
        URL.revokeObjectURL(url);
      };

      const importNotes = (e) => {
        const file = e.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = (ev) => {
            setNotes(ev.target.result);
          };
          reader.readAsText(file);
        }
      };

      return (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="p-4 sm:p-6"
        >
          <div className="p-6 rounded-lg bg-white shadow-lg">
            <h2 className="text-2xl font-bold mb-4">📝 Notes</h2>
            <textarea
              className="w-full h-64 p-2 border rounded"
              value={notes}
              onChange={(e) => setNotes(e.target.value)}
              placeholder="Jot down your study notes..."
              aria-label="Study Notes"
            ></textarea>
            <div className="flex gap-2 mt-4">
              <button
                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                onClick={exportNotes}
                aria-label="Export Notes"
              >
                Export Notes
              </button>
              <input
                type="file"
                accept=".md,.txt"
                onChange={importNotes}
                className="p-2"
                aria-label="Import Notes"
              />
            </div>
          </div>
        </motion.div>
      );
    };

    const Resources = () => {
      const resources = [
        { name: 'Notion', url: 'https://www.notion.so', desc: 'All-in-one workspace' },
        { name: 'Quizlet', url: 'https://quizlet.com', desc: 'Flashcards and study tools' },
        { name: 'Khan Academy', url: 'https://www.khanacademy.org', desc: 'Free online courses' },
        {
          name: 'Crash Course',
          url: 'https://www.youtube.com/playlist?list=PL8dPuuaLjXtOvEKbMqvWUE3lB1jQAVZlg',
          desc: 'Educational YouTube playlist for various subjects',
        },
        {
          name: 'CS50 Lectures',
          url: 'https://www.youtube.com/playlist?list=PLhQjrBD2T382VRUw5ZpSxZSHEtOxtJrlT',
          desc: 'Harvard’s Intro to Computer Science lectures',
        },
      ];

      return (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="p-4 sm:p-6"
        >
          <div className="p-6 rounded-lg bg-white shadow-lg">
            <h2 className="text-2xl font-bold mb-4">🔗 Study Resources</h2>
            <ul className="space-y-4">
              {resources.map((res) => (
                <li key={res.name}>
                  <a
                    href={res.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-blue-500 hover:underline"
                    aria-label={`Visit ${res.name}`}
                  >
                    {res.name}
                  </a>
                  : {res.desc}
                </li>
              ))}
            </ul>
          </div>
        </motion.div>
      );
    };

    const Goals = () => {
      const [goals, setGoals] = useState(safeLocalStorage.getItem('goals', []));
      const [newGoal, setNewGoal] = useState('');
      const [duration, setDuration] = useState(1);

      useEffect(() => {
        safeLocalStorage.setItem('goals', goals);
      }, [goals]);

      const addGoal = () => {
        if (newGoal.trim() && duration > 0) {
          setGoals((prev) => [
            ...prev,
            {
              id: Date.now().toString(),
              title: newGoal,
              duration,
              completed: false,
              created: new Date().toISOString(),
            },
          ]);
          setNewGoal('');
          setDuration(1);
        }
      };

      const toggleGoal = (id) => {
        setGoals((prev) => prev.map((g) => (g.id === id ? { ...g, completed: !g.completed } : g)));
      };

      const deleteGoal = (id) => {
        setGoals((prev) => prev.filter((g) => g.id !== id));
      };

      return (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="p-4 sm:p-6"
        >
          <div className="p-6 rounded-lg bg-white shadow-lg">
            <h2 className="text-2xl font-bold mb-4">🎯 Study Goals</h2>
            <div className="flex flex-col sm:flex-row gap-2 mb-4">
              <input
                type="text"
                value={newGoal}
                onChange={(e) => setNewGoal(e.target.value)}
                placeholder="Add a new goal (e.g., Study 2 hours)"
                className="flex-1 p-2 border rounded"
                aria-label="New Goal"
              />
              <input
                type="number"
                value={duration}
                onChange={(e) => setDuration(parseInt(e.target.value))}
                placeholder="Days"
                className="w-24 p-2 border rounded"
                min="1"
                aria-label="Goal Duration"
              />
              <button
                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                onClick={addGoal}
                aria-label="Add Goal"
              >
                Add
              </button>
            </div>
            <ul className="space-y-2">
              {goals.map((goal) => (
                <motion.li
                  key={goal.id}
                  className={`flex items-center justify-between p-2 border rounded ${goal.completed ? 'animate-pulse' : ''}`}
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className="flex items-center">
                    <input
                      type="checkbox"
                      checked={goal.completed}
                      onChange={() => toggleGoal(goal.id)}
                      className="mr-2"
                      aria-label={`Toggle ${goal.title} completion`}
                    />
                    <span className={goal.completed ? 'line-through' : ''}>
                      {goal.title} ({goal.duration} days)
                    </span>
                  </div>
                  <button
                    className="text-red-500 hover:text-red-700"
                    onClick={() => deleteGoal(goal.id)}
                    aria-label={`Delete ${goal.title}`}
                  >
                    Delete
                  </button>
                </motion.li>
              ))}
            </ul>
          </div>
        </motion.div>
      );
    };

    const Settings = ({ theme, setTheme, fontSize, setFontSize }) => {
      const themes = ['light', 'dark', 'blue', 'green'];
      const [blockedSites, setBlockedSites] = useState(safeLocalStorage.getItem('blockedSites', []));
      const [newSite, setNewSite] = useState('');
      const [customCategories, setCustomCategories] = useState(
        safeLocalStorage.getItem('customCategories', ['Math', 'Science', 'History'])
      );
      const [newCategory, setNewCategory] = useState('');

      useEffect(() => {
        safeLocalStorage.setItem('blockedSites', blockedSites);
      }, [blockedSites]);

      useEffect(() => {
        safeLocalStorage.setItem('customCategories', customCategories);
      }, [customCategories]);

      const addBlockedSite = () => {
        if (newSite.trim()) {
          setBlockedSites((prev) => [...prev, newSite.trim()]);
          setNewSite('');
        }
      };

      const removeBlockedSite = (site) => {
        setBlockedSites((prev) => prev.filter((s) => s !== site));
      };

      const addCustomCategory = () => {
        if (newCategory.trim() && !customCategories.includes(newCategory.trim())) {
          setCustomCategories((prev) => [...prev, newCategory.trim()]);
          setNewCategory('');
        }
      };

      const removeCustomCategory = (category) => {
        setCustomCategories((prev) => prev.filter((c) => c !== category));
      };

      const exportData = () => {
        const data = {
          tasks: safeLocalStorage.getItem('tasks', []),
          settings: safeLocalStorage.getItem('pomoSettings', {}),
          notes: safeLocalStorage.getItem('notes', ''),
          goals: safeLocalStorage.getItem('goals', []),
          blockedSites: safeLocalStorage.getItem('blockedSites', []),
          customCategories: safeLocalStorage.getItem('customCategories', []),
        };
        const blob = new Blob([JSON.stringify(data)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'study_data.json';
        a.click();
        URL.revokeObjectURL(url);
      };

      const importData = (e) => {
        const file = e.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = (ev) => {
            try {
              const data = JSON.parse(ev.target.result);
              safeLocalStorage.setItem('tasks', data.tasks || []);
              safeLocalStorage.setItem('pomoSettings', data.settings || {});
              safeLocalStorage.setItem('notes', data.notes || '');
              safeLocalStorage.setItem('goals', data.goals || []);
              safeLocalStorage.setItem('blockedSites', data.blockedSites || []);
              safeLocalStorage.setItem('customCategories', data.customCategories || ['Math', 'Science', 'History']);
              window.location.reload();
            } catch (err) {
              alert('Invalid file format. Please upload a valid JSON file.');
            }
          };
          reader.readAsText(file);
        }
      };

      useEffect(() => {
        const interval = setInterval(exportData, 5 * 60 * 1000); // Every 5 minutes
        return () => clearInterval(interval);
      }, []);

      return (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="p-4 sm:p-6"
        >
          <div className="p-6 rounded-lg bg-white shadow-lg">
            <h2 className="text-2xl font-bold mb-4">⚙️ Settings</h2>
            <div className="space-y-4">
              <div>
                <label htmlFor="theme">Theme:</label>
                <select
                  id="theme"
                  className="ml-2 p-1 border rounded"
                  value={theme}
                  onChange={(e) => setTheme(e.target.value)}
                  aria-label="Select Theme"
                >
                  {themes.map((t) => (
                    <option key={t} value={t}>
                      {t.charAt(0).toUpperCase() + t.slice(1)}
                    </option>
                  ))}
                </select>
              </div>
              <div>
                <label htmlFor="fontSize">Font Size:</label>
                <input
                  id="fontSize"
                  type="range"
                  min="12"
                  max="24"
                  value={fontSize}
                  onChange={(e) => setFontSize(parseInt(e.target.value))}
                  className="ml-2"
                  aria-label="Adjust Font Size"
                />
                <span>{fontSize}px</span>
              </div>
              <div>
                <button
                  className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                  onClick={() => Notification.requestPermission()}
                  aria-label="Enable Notifications"
                >
                  Enable Notifications
                </button>
              </div>
              <div>
                <h3 className="text-lg font-semibold">Blocked Sites (Focus Mode)</h3>
                <div className="flex gap-2 mb-2">
                  <input
                    type="text"
                    value={newSite}
                    onChange={(e) => setNewSite(e.target.value)}
                    placeholder="e.g., facebook.com"
                    className="flex-1 p-2 border rounded"
                    aria-label="Add Blocked Site"
                  />
                  <button
                    className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                    onClick={addBlockedSite}
                    aria-label="Add Blocked Site"
                  >
                    Add
                  </button>
                </div>
                <ul className="space-y-2">
                  {blockedSites.map((site) => (
                    <li key={site} className="flex items-center justify-between p-2 border rounded">
                      <span>{site}</span>
                      <button
                        className="text-red-500 hover:text-red-700"
                        onClick={() => removeBlockedSite(site)}
                        aria-label={`Remove ${site}`}
                      >
                        Remove
                      </button>
                    </li>
                  ))}
                </ul>
              </div>
              <div>
                <h3 className="text-lg font-semibold">Custom Categories</h3>
                <div className="flex gap-2 mb-2">
                  <input
                    type="text"
                    value={newCategory}
                    onChange={(e) => setNewCategory(e.target.value)}
                    placeholder="e.g., Literature"
                    className="flex-1 p-2 border rounded"
                    aria-label="Add Custom Category"
                  />
                  <button
                    className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                    onClick={addCustomCategory}
                    aria-label="Add Custom Category"
                  >
                    Add
                  </button>
                </div>
                <ul className="space-y-2">
                  {customCategories.map((category) => (
                    <li key={category} className="flex items-center justify-between p-2 border rounded">
                      <span>{category}</span>
                      <button
                        className="text-red-500 hover:text-red-700"
                        onClick={() => removeCustomCategory(category)}
                        aria-label={`Remove ${category}`}
                      >
                        Remove
                      </button>
                    </li>
                  ))}
                </ul>
              </div>
              <div>
                <button
                  className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                  onClick={exportData}
                  aria-label="Export Data"
                >
                  Export Data
                </button>
                <input
                  type="file"
                  accept=".json"
                  onChange={importData}
                  className="ml-2"
                  aria-label="Import Data"
                />
              </div>
            </div>
          </div>
        </motion.div>
      );
    };

    const StudyTools = () => {
      const [activeTab, setActiveTab] = useState('pomodoro');
      const [tasks, setTasks] = useState(safeLocalStorage.getItem('tasks', []));
      const [sessions, setSessions] = useState(safeLocalStorage.getItem('sessions', []));
      const [theme, setTheme] = useState(safeLocalStorage.getItem('theme', 'light'));
      const [fontSize, setFontSize] = useState(safeLocalStorage.getItem('fontSize', 16));
      const [focusMode, setFocusMode] = useState(false);

      useEffect(() => {
        safeLocalStorage.setItem('tasks', tasks);
      }, [tasks]);

      useEffect(() => {
        safeLocalStorage.setItem('sessions', sessions);
      }, [sessions]);

      useEffect(() => {
        safeLocalStorage.setItem('theme', theme);
        document.body.className = {
          light: 'bg-white text-black',
          dark: 'bg-gray-900 text-white',
          blue: 'bg-blue-100 text-black',
          green: 'bg-green-100 text-black',
        }[theme] || 'bg-white text-black';
      }, [theme]);

      useEffect(() => {
        safeLocalStorage.setItem('fontSize', fontSize);
      }, [fontSize]);

      const addSession = (session) => {
        setSessions((prev) => [...prev, { ...session, date: new Date().toISOString() }]);
      };

      const totalTime = useMemo(
        () => sessions.filter((s) => s.type === 'Work').reduce((sum, s) => sum + s.duration, 0),
        [sessions]
      );

      const completionPercentage = useMemo(
        () => (tasks.length ? (tasks.filter((t) => t.completed).length / tasks.length) * 100 : 0),
        [tasks]
      );

      const tabs = [
        { value: 'pomodoro', label: 'Pomodoro', component: <Pomodoro tasks={tasks} setTasks={setTasks} addSession={addSession} /> },
        { value: 'stopwatch', label: 'Stopwatch', component: <Stopwatch /> },
        { value: 'timer', label: 'Timer', component: <Timer /> },
        { value: 'calendar', label: 'Calendar', component: <Calendar tasks={tasks} setTasks={setTasks} /> },
        { value: 'tasks', label: 'Tasks', component: <Tasks tasks={tasks} setTasks={setTasks} /> },
        { value: 'analytics', label: 'Analytics', component: <Analytics sessions={sessions} /> },
        { value: 'notes', label: 'Notes', component: <Notes /> },
        { value: 'resources', label: 'Resources', component: <Resources /> },
        { value: 'goals', label: 'Goals', component: <Goals /> },
        { value: 'settings', label: 'Settings', component: <Settings theme={theme} setTheme={setTheme} fontSize={fontSize} setFontSize={setFontSize} /> },
      ];

      return (
        <ErrorBoundary>
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
            className={`max-w-5xl mx-auto py-10 ${focusMode ? 'fixed inset-0 bg-gray-100 flex items-center justify-center' : ''}`}
            style={{ fontSize: `${fontSize}px` }}
          >
            <h1 className="text-3xl sm:text-4xl font-bold text-center mb-8">🚀 Ultimate Study Focus Suite</h1>
            {!focusMode && (
              <>
                <div className="mb-6 p-4 bg-white rounded-lg shadow-lg">
                  <h2 className="text-xl font-semibold mb-2">Progress Dashboard</h2>
                  <p>Total Study Time: {formatTime(totalTime)}</p>
                  <p>Tasks Completed: {tasks.filter((t) => t.completed).length}/{tasks.length}</p>
                  <p>Completion Rate: {completionPercentage.toFixed(1)}%</p>
                </div>
                <div className="flex flex-wrap gap-2 mb-6">
                  {tabs.map((tab) => (
                    <motion.button
                      key={tab.value}
                      className={`px-4 py-2 rounded text-sm sm:text-base ${
                        activeTab === tab.value
                          ? 'bg-blue-500 text-white'
                          : 'bg-gray-200 text-black hover:bg-gray-300'
                      }`}
                      onClick={() => setActiveTab(tab.value)}
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      aria-label={`Switch to ${tab.label}`}
                    >
                      {tab.label}
                    </motion.button>
                  ))}
                </div>
              </>
            )}
            <motion.button
              className="fixed top-4 right-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm sm:text-base"
              onClick={() => setFocusMode((prev) => !prev)}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              aria-label={focusMode ? 'Exit Focus Mode' : 'Enter Focus Mode'}
            >
              {focusMode ? 'Exit Focus Mode' : 'Enter Focus Mode'}
            </motion.button>
            {tabs.find((tab) => tab.value === activeTab).component}
          </motion.div>
        </ErrorBoundary>
      );
    };

    ReactDOM.render(<StudyTools />, document.getElementById('root'));
  </script>
</body>
</html>

